name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Suite
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install Frontend Dependencies  
      run: |
        cd frontend
        npm ci
        
    - name: Run Backend Tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        JWT_SECRET: test-secret
        
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test
        
    - name: Backend Type Check
      run: |
        cd backend
        npm run typecheck
        
    - name: Frontend Type Check
      run: |
        cd frontend
        npm run build
        
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Audit Backend Dependencies
      run: |
        cd backend
        npm audit --audit-level high
        
    - name: Audit Frontend Dependencies
      run: |
        cd frontend
        npm audit --audit-level high
        
  deploy-backend:
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    name: Deploy Backend
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        cd backend
        npm ci
        
    - name: Build Application
      run: |
        cd backend
        npm run build
        
    - name: Deploy to Railway
      uses: railway-deploy@v3
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: cybertask-backend
        
    - name: Run Database Migrations
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
  deploy-frontend:
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    name: Deploy Frontend
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build Application
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
        VITE_APP_NAME: CyberTask
        VITE_APP_VERSION: ${{ github.ref_name }}
        
    - name: Deploy to Vercel
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: frontend
        
  validate-deployment:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    name: Validate Production Deployment
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Validation Dependencies
      run: |
        npm install axios ws
        
    - name: Run Production Validation
      run: |
        node production/validation/api-validation.js
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_WS_URL: ${{ secrets.VITE_WS_URL }}
        
    - name: Run Performance Benchmarks
      run: |
        node production/benchmarks/performance-test.js
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        
    - name: Health Check Frontend
      run: |
        curl -f https://cybertask.vercel.app || exit 1
        
    - name: Health Check Backend  
      run: |
        curl -f ${{ secrets.VITE_API_URL }}/health || exit 1
        
  create-release:
    needs: [validate-deployment]
    runs-on: ubuntu-latest
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Generate Changelog
      id: changelog
      run: |
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT  
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: CyberTask ${{ github.ref_name }}
        body: |
          ## ðŸš€ CyberTask ${{ github.ref_name }}
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### Deployment URLs
          - **Frontend**: https://cybertask.vercel.app
          - **API**: ${{ secrets.VITE_API_URL }}
          
          ### Demo Account
          - **Email**: demo@cybertask.com
          - **Password**: Demo123!
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD~1)...${{ github.ref_name }}
        draft: false
        prerelease: false
        
  notify-team:
    needs: [create-release]
    runs-on: ubuntu-latest  
    name: Notify Team
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.validate-deployment.result == 'success'
      run: |
        echo "ðŸŽ‰ Production deployment successful!"
        echo "Frontend: https://cybertask.vercel.app"
        echo "API: ${{ secrets.VITE_API_URL }}"
        
    - name: Notify Failure
      if: failure()
      run: |
        echo "ðŸš¨ Production deployment failed!"
        echo "Check the workflow logs for details."
        exit 1