version: '3.8'

# CyberTask Staging Environment Configuration
# This configuration provides a staging environment that closely mirrors production
# but with reduced resource requirements and enhanced debugging capabilities

services:
  # PostgreSQL Database - Staging
  postgres:
    image: postgres:15-alpine
    container_name: cybertask-postgres-staging
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cybertask_staging}
      POSTGRES_USER: ${POSTGRES_USER:-cybertask}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Enable additional logging for debugging
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/backup:/backup
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    networks:
      - cybertask-staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cybertask}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Staging
  redis:
    image: redis:7-alpine
    container_name: cybertask-redis-staging
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 128mb --maxmemory-policy allkeys-lru --loglevel notice
    volumes:
      - redis_staging_data:/data
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    networks:
      - cybertask-staging
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Backend API - Staging
  backend:
    image: cybertask-backend:latest
    container_name: cybertask-backend-staging
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: staging
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-cybertask}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-cybertask_staging}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,https://staging.cybertask.app}
      LOG_LEVEL: debug  # Enhanced logging for staging
      # Rate limiting - More permissive for testing
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX_REQUESTS: 200
      # Session settings
      SESSION_SECRET: ${SESSION_SECRET}
      COOKIE_SECURE: false  # Allow HTTP for staging
      COOKIE_HTTP_ONLY: true
      COOKIE_SAME_SITE: lax
      # Monitoring
      ENABLE_MONITORING: true
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: staging
    volumes:
      - backend_staging_logs:/app/logs
    ports:
      - "3002:3000"  # Different port for direct access
    networks:
      - cybertask-staging
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Frontend Application - Staging
  frontend:
    image: cybertask-frontend:latest
    container_name: cybertask-frontend-staging
    restart: always
    depends_on:
      - backend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3002}
      VITE_APP_ENV: staging
      VITE_ENABLE_DEBUG: true
      VITE_SENTRY_DSN: ${VITE_SENTRY_DSN}
      VITE_VERSION: ${VERSION:-latest}
    ports:
      - "3001:8080"  # Different port for direct access
    networks:
      - cybertask-staging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Load Balancer - Staging
  nginx:
    image: nginx:1.24-alpine
    container_name: cybertask-nginx-staging
    restart: always
    depends_on:
      - backend
      - frontend
    volumes:
      - ./docker/nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.staging.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_staging_logs:/var/log/nginx
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - cybertask-staging
    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .template
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring and Debugging Services for Staging

  # Adminer for Database Management
  adminer:
    image: adminer:4.8.1
    container_name: cybertask-adminer-staging
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8081:8080"
    networks:
      - cybertask-staging
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cybertask-redis-commander-staging
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}
      HTTP_USER: admin
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "8082:8081"
    networks:
      - cybertask-staging
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  # Log aggregator for staging (lightweight)
  fluentd:
    build:
      context: ./docker/fluentd
      dockerfile: Dockerfile
    container_name: cybertask-fluentd-staging
    restart: always
    volumes:
      - backend_staging_logs:/var/log/backend:ro
      - nginx_staging_logs:/var/log/nginx:ro
      - ./docker/fluentd/conf:/fluentd/etc
    networks:
      - cybertask-staging
    environment:
      FLUENTD_CONF: fluent.staging.conf
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  cybertask-staging:
    driver: bridge
    name: cybertask_staging_network
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_staging_data:
    driver: local
    name: cybertask_postgres_staging_data
  redis_staging_data:
    driver: local
    name: cybertask_redis_staging_data
  backend_staging_logs:
    driver: local
    name: cybertask_backend_staging_logs
  nginx_staging_logs:
    driver: local
    name: cybertask_nginx_staging_logs